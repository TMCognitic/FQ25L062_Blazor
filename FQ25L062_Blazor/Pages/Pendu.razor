@page "/Pendu"

<PageTitle>Pseudo Pendu</PageTitle>

<h3>Pseudo Pendu</h3>

@if(mot is null)
{
    @if(result is not null)
    {
        <h1>@result</h1>
    }

    <button @onclick="NewGame">Nouvelle partie</button>
}
else
{
    <div>
        <select @onchange="OnChange">
            @if(selectedChar is "")
            {
                <option value="" selected>Selectionnez une lettre</option>
            }
            else
            {
                <option value="">Selectionnez une lettre</option>
            }
            @foreach(string c in chars)
            {
                <option value="@c">@c</option>
            }
        </select>
        <button @onclick="Try">Essayer</button>
    </div>

    <fieldset>
        <legend>Mot à trouver</legend>
        <p class="letter-space">@motMasque</p>
        <p>Nombre d'essais : @nombreEssais</p>
    </fieldset>    

    <fieldset>
        <legend>Lettres déjà jouées</legend>
        @if(playedChar.Count > 0)
        {
            <p class="letter-space">@string.Join("", playedChar)</p>
        }        
    </fieldset>
}


@code {
    private static List<string> mots = new List<string>()
    {
        "ABSTRAIT", "ACCIDENT", "ACROBATE", "ADMIRER", "AFFICHER", "AGENCER", "ALGÈBRE", "AMBIANCE", "ANANAS",
        "ANIMAL", "ANNULER", "ANTIQUE", "APPORTER", "ARBITRE", "ARCHIVER", "ARGENT", "ARMOIRE", "ARPENTER",
        "ARTISAN", "ASSIETTE", "ASTUCE", "ATELIER", "ATTACHER", "AUDIBLE", "AUGMENTER", "AVANCER", "BALANCER",
        "BANQUET", "BAROQUE", "BATAILLE", "BAVARDER", "BEAUTÉ", "BÉNÉFICE", "BIBLIOTHÈQUE", "BIJOUTERIE",
        "BISCOTTE", "BLOUSON", "BONHEUR", "BOUSSOLE", "BRILLANT", "BROUILLARD", "BRÛLURE", "CABINET", "CACTUS",
        "CALIBRE", "CAMEMBERT", "CANICULE", "CAPABLE", "CAPTEUR", "CARAVANE", "CARBONE", "CASCADE", "CASSETTE",
        "CAUCHEMAR", "CAVALIER", "CERVEAU", "CHALEUR", "CHAMBRE", "CHANSON", "CHAUSSURE", "CHEVALIER", "CHIMÈRE",
        "CHOCOLAT", "CIGOGNE", "CLAVIER", "CLIGNOTE", "CLOCHE", "COFFRET", "COLIBRI", "COLONNE", "COMIQUE",
        "COMPLICE", "CONFIANCE", "CONFORT", "CONGELER", "CONQUÊTE", "CONSIGNE", "CONTRÔLE", "CORDAGE", "CORPS",
        "COURAGE", "CRAVATE", "CRISTAL", "CROISSANT", "CUILLÈRE", "CURIEUX", "CYCLISTE", "DAUPHIN", "DENTISTE",
        "DESSINER", "DIAMANT", "DICTIONNAIRE", "DILIGENT", "DOMPTEUR", "DOUCEUR", "DRAPEAU", "DURABLE", "ÉCHARPE",
        "ÉCLAIRE", "ÉCRIVAIN", "ÉDUCATION", "ÉLÉPHANT", "ÉMERAUDE", "ÉNERGIE", "ÉPINGLE", "ÉQUATION"
    };


    private string? result = null;
    private string? mot = null;
    private string motMasque = "";
    private string selectedChar = "";
    private int nombreEssais;
    List<string> chars = Enumerable.Empty<string>().ToList();
    Queue<string> playedChar = new Queue<string>();

    private void NewGame()
    {
        nombreEssais = 0;
        chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".Select(c => c.ToString()).ToList();
        playedChar.Clear();
        mot = mots[Random.Shared.Next(mots.Count)];
        motMasque = new string('_', mot.Length);
    }

    private void OnChange(ChangeEventArgs e)
    {
        selectedChar = e?.Value?.ToString() ?? "";
    }

    private void Try()
    {
        if(selectedChar is not "")
        {
            nombreEssais++;
            playedChar.Enqueue(selectedChar);
            chars.Remove(selectedChar);

            char[] motMasqueDecompose = motMasque.ToCharArray();
            for(int index = 0; index < mot!.Length; index++)
            {                    
                if (String.Compare(mot[index].ToString(), selectedChar, CultureInfo.CurrentCulture, CompareOptions.IgnoreNonSpace) == 0)
                {
                    motMasqueDecompose[index] = mot[index];
                }
            }
            motMasque = new string(motMasqueDecompose);

            if(motMasque == mot)
            {
                result = $"Vous avez trouvé le mot '{mot!}' en {nombreEssais} essais!";
                mot = null;
            }

            selectedChar = "";
        }
    }
}
